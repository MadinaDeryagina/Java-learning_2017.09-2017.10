	Циклы.
	for
	
	for(int i = 0, c = 1; i < 10 && c > 2; i++, c++) {
	}
	Цикл for самый гибкий, самый мощный. Парится по поводу оптимизаций не стоит, JVM отлично оптимизирует.
	
	while
	do {
	} while (true)
	
	while (true) {
	}
	
	foreach - появился недавно, с java версии 5, и нужен он для итерации по массивам. пишется как обычный for
	Пример: String [] args
	for(String arg : args) {
		System.out.println(arg);
	}
	Можно ли как то управлять циклом, находясь внутри цикла? Ответ: можно - можно прервать выполнение цикла оператором break и прервать текущую итерацию цикла
и продолжить уже со следующего цикла с помощью оператора continue.
	Иногда нам надо из внутреннего цикла управлять внешним циклом, как же нам это сделать?
	Можно поставить метки, например:
	
	for(int i = 0; i < 10; i++)
	{
		outer:do {
			inner: while (true) {
				break inner;
				continue: outer;
			}
		} while(true)
	}
	
	Теперь на уровень дизайна: Когда у нас система начинает разрастаться, нам нужны какие-то метрики, как нам оценивать наш код.
	1. Количество строк кода, без учета комментариев.
	2. Цикломатическая сложность - метрика, которая показывает, сколько в нашем коде циклов и ветвлений. Нам это нужно, чтобы увидеть проблемные точки в программе.
Если высокая цикломатическая сложность, то код будет плохо читаться. (Cyclomatic complexity)
