			Контроль исполнения.
			if
	public static void main(String [] args) {
		if(args.lenght > 0) {		//Вопрос: обязательны ли здесь скобочки? Ответ: нет, но так делать не желательно, мы так делаем, если надо сделать отсечку
									//например: оператор return;
		}
		if(false) throw new RuntimeException();
	}
	Например аутентификация: если мы пытаемся пройти аутентификацию, что может произойти? Неверный пароль, несуществующий пользователь и т.д.
	Отсечками мы можем обозначить альтернативное поведение, но если дальше мы прошли, то все ок, нам не придется делать много if-ов.
	При использовании Guard Clause for alternate flows сначала отсекаем альтернативные варианты.
	Альтернативаня веточка.
	if (true) { }
	else if (false) { }
	else { }
	На заметку: если у нас сложное выражение, к примеру if(a && b || !c), якобы непонятно что здесь написано, как отрефакторить, можно сделать экстракт.
	например:
	boolean isWritable = a && isWritable;
	boolean isAccesible = !c;
	boolean isAllowed = isWritable || isAccesible;
	if (isAllowed) {	//Такой вид будет иметь строка.
	}
	
			switch()
	Что мы делаем: берем переменную и в зависимости от значения - переходим на ветку.
	int i = 1;
	Для читабельности часто просто экстрактируют методы. Название метода должно четко выражать наши намерения по названию.
	switch(i) {
		case 0: 
			System.out.println("1");
			break;
		case 1: {
			System.out.println("2");
			break;
		}
	}
	Что же лучше одна точка выхода или несколько? При больших огромных методах, лучше использовать одну точку выхода, при маленьких методах лучше несколько 
точек выхода.
	По case: все кейсы в switch провальные, чтобы прекращать работу switch, нужно ставить break. Если мы делаем к примеру i = 2; У нас куда упадет? Никуда, чтобы
для любой переменной можно поставить default:
	switch(i) {
		case 0: 
			System.out.println("1");
			break;
		case 1: {
			System.out.println("2");
			break;
		}
		default:
			System.out.println("2");
	}
	Проблемы switch:
	1. В case свитча должны быть значения, вычислимые на этапе компиляции - это либо константы, либо выражения, которые можно вычислить из констант.
	2. Switch принимает в качестве аргумента целые числы, кроме long, принимает string, enum, char.
	Проверить гипотезу: как проверяется строчка, через ссылочку или через метод equals
	