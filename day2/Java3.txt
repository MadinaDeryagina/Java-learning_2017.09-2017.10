			Maven
		   /	 \
	Build tool	  Depence manager
	|		  |
Clean		Default
	|		  |
_Clean_	   _Dependency_
			  |
		   _Compile code_
			  |
		   _Compile test_
			  |
		   _Unit tests_
		      |
			package
			  |
			integer tests
			  |
			verify(статический анализ кода)
			  |
			install
			
Verify - это синтаксический анализ, который проверяет в откомпилированном коде синтаксис, это такой же синтксический анализ, как и до компиляции.
	
	
Maven - инструмент, которые позволяет управлять циклом сборки, сам он по сути ничего не делает, всю работу выполняют плагины.
Плагины:
	Maven-compile-plugin
	Maven-UnitTest-plugin
	Maven-dependency-plugin
	Maven-ShortFire-plugin
	Maven-Archive-plugin
	Maven-resource-plugin
	Где всё это сконфигурировать? pom.xml(project object module) Можно сконфигурировать те плагины, которые уже есть, либо подключить новые плагины.
Для запуска надо запустить, например:
	mvn clean verify - отработают все цели до verify, в процессе сборки, мы настраиваем 
	В проекте mvn может быть еще одна папка, которая называется resource.
В проекте Maven-resource-plugin работает очень просто, он просто копирует все, что есть в папке resource в папку target.
Чтобы maven нашел компилятор, можно выставить переменную JAVA_HOME

	Что представляет из себя pom.xml - это набор настроек, например часто бывает, что maven использует предыдущие версии для компиляции, тогда
указываем настройку в pom.xml <source>1.8</source>, <target>1.8</target>, потом можно подробней почитать про настройки.
При компиляции с командной строки используется опция -source 1.8