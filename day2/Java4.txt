	Зависимости для maven.
	Что делать, если нет библиотек, которые необходимы для компиляции?
	Ручками скачивать библиотеки, ручками подкладывать в нужные папки, все ручками, а потом библиотеки начинаются версионировать. Поэтому все 
становится адом - dependency hell. И для того чтобы не страдать, мы приходим к артефакту.
Артефакт - это зависимость, логическая еденица. Что-то запакованное, от него мы ходим только, чтобы он однозначно идентифицировался.
Чем артефакт отличается от пакета java? В артефакте нет привязки к языку, туда можно положить что угодно, исходники на каком угодно языке.
Что представляет из себя артефакт:
	1.	Jar-файл -> package: class
	2.	java-доки
	3.	Можно включить сходники.
	Но все это не обязательно Java, это может быть любой другой язык.
Что есть в артефакте:

	groupId = namespace(groupId соответсвует нашему уникальному домену, туда вносим, например имя компании, главное, чтобы оно не пересеклось ни с чем)
groupId = название компании например.
		пример:	<groupId>com.acme.edu</groupId>
		
	artifactId = class 
artifactId = название проекта.
		пример:	<artifactId>javajunior</artifactId>
		
	Когда большую систему бьем на кусочки, делаем так, чтобы можно было использовать повторное использование. Разбиваем проект на пакеты, чтобы можно
было подгружать зависимости.
	Как это делается: можно сделать репозиторий, доступный всем в интернете, есть поисковая машина mvnrepository.com, где сохраняются все версии библиотек,
библиотека развивается, иногда ломается, но благодаря репозиторию можно поддерживать обратную совместимость. Взять от туда библиотеку любой версии.
Но там система контроля версии не исходников, а бинарников. Если используем старые библиотеки и внезапно решили перейти на новые библиотечки, того
придется заного перетестировать полностью весь проект с нуля, главное, чтобы итоговое ПО соответсвовало требованиям Requerenment.

	Как вытягиваются библиотеки: если мы не указали никаких репозиториев, он по умолчанию ломится в центральный репозиторий, пытается там найти 
именно такой groupId, именно такой artifactId, именно такую версию, и если он не найдет там, то сборка сразу ломается. Но есть еще второй уровень репозиториев,
который называется корпоративный репозиторий. Его нужно явно прописать в настройках maven. Третий уровень репозитория - локальный уровень(cache), maven скачивает
первый раз библиотечки, и при повторно обращении, заного скачивать те же самые пакеты он уже не будет. Локальный репозиторий находится в ~/.m2/repository

	Чтобы забрать библиотечки, заходим http://mvnrepository.com/, вводим в поиск название библиотчеки, например spring, есть некоторые версии, milestone - 
лучше не скачивать, RC тоже только тестовые, лучше использовать release. Копируем xml в pom.xml и все - наши библиотечки подключены.
<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>4.3.11.RELEASE</version>
</dependency>
	Артефакт с версией snapshot, означает, что mvn будет каждый раз ходить в репозиторий и скачивать его.
	Практика (Development infrastructure: Maven (1.5/0.5)):
		1. Устанавливаем maven - установили maven давно.
		2. Устанавливаем переменую M2_HOME	- установили ее давно.
		3. Есть готовый проект	- скачали проект java-junior.
		4. Запустить maven - запустили mvn clean verify из папки с проектом, отлично все прошло.
	Все репозитории бинарников и библиотек должны скачиваться через maven, все src лучше скачивать через github
		