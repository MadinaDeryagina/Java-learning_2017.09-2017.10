		Generics
	Процедурный 							//ASK(Дай мне данные)
		vs OOD 								//TDA(Tell dont ask) - делай, не спрашивая
		vs лябда-функциии					//Разделяем данные и функции и пытаемся скомпонировать из функции идеальный функциональный метод.
		
	Лябда-функции - мы данные не трогаем, не гоняем между функциями, а композируем функции между собой и в конце делаем операцию с функциями
	
	Пример по функциоальному стилю:
		Есть более сложные фреймворки, которые позволяют запускать замыкание отложенно, выбрать, что параллелить, а что не параллелить.
То что отчуждаем поведение и что должно быть выполнено.
	2 фишки:
	1. Данные immutable.
	2. Разделяем данные и функции.
	
	Надо сделать дома: создать объект ServerAccepter - запустим его, он должен порождать объекты CliectConnectionHandler, для каждого accept-а создаем новую ниточку
и запускаем на обработку.

	Критерий приемки Exception.
	Надо почувствовать себя в роли аналитиков, 
		надо чтобы все будущие сейверы выкидывали ошибку, как обрабатывать - решать нам.
		Потенциальный источник ошибок - это пользователь, оформить исключительные ситуации в виде check - exception
		Ну почти успешно.
		
		Когда хотим быстро сделать анонимный вложенный класс на функции жмем ctrl+p - видим какой объект ждет функция, затем нажимаем alt+пробел - выбираем
анонимный вложенный класс, например LoggerTest{....} - дальше можно нажать alt+интер, так как у нас уже будет вложенный класс, сворачиваемый в Лябда-функции