		Как используются аннотации.
	@RestController - автоматически создаст веб-сервис,
	@RequestMapping("/configuration") - указывает, что по этому url отклюикается веб - сервис
	@JsonProperty(value="tag",value="value") - автоматически распарсит полученные параметры и переведет их в объект json
	
	Аннотаций много - их основная идея - это настраивать фреймворк с которым мы работаем. Есть аннотации, которые специфичны для фреймворка.
	2 больших фреймворков - Spring и JavaEE - они очень похожи с точностью до аннотаций.
	
		Exprettion problem - добавляем новые структуры данных и меняем поведение, не залазия в уже существующий код. До конца проблема так и не решена.
	Шаблон Visitor - самый громоздкий в реализации, но если его знать можно задизайнить так, чтобы легко потом можно было изменять программу.
	Задание*: посмотреть Visitor(разобраться с ним, как его сделать - пригодится в проекте)
	
		Системная библиотека.
	1. Класс, который называется System
	System.currentTimeMillis(); //epoch - выводит количество миллисекунд с 1 января 1970 года.
	System.nanoTime(); // - скорей всего на некоторых платформах не получится получать время в нано-секундах - это будет иллюзия.
	System.gc(); //JLS говорит, что это просто просьба отработать сборщик мусора, но далеко не факт, что он отработает.
	System.getProperties(); //Выдает системные и пользовательские свойства 
		В консоле команда jvisualvm - там вкладка sysytem property, нам понадобится line.Separator, user.home, user.dir, path.separator
		Можно получить так например System.lineSeparator();
		File.separator
		File.pathSeparator
			По функциям можно нажать alt+q и посмотреть документаци.
		Для языков есть еще класс Locale
		System.getProperties().getProperty("my.app.color"); // получим свойстов
		Если хотим задать свойство?
		1. В конфигурационном файле.
		2. Пр запуске java-приложения //java -Dmy.app.color=RED SystemDemo при запуске java-приложения.
									  //java -Dmy.app.color=RED -Dfile.encoding=Cp866 SystemDemo
		System.out(); - позволяет перенаправить поток ввода-вывода.
		Runtime.getRuntime(); - позволяет получить сколько процессоров/общее число оперативы/число доступной оперативы и т.д.
		Runtime.getRuntime().exec("ls"); - позволяет выполнить команду в операционной системе
		Runtime.getRuntime().exec("ls").getOutputStream();
		
		//Alternative: JNI - внешний код пишем бинарно на c или c++ 
		System.load("");
		MyNativeWrapper.callNativeMethod();
		Из dll делаем вызов функции этим методом, но тут придется делать библиотеку для разных операционных систем.
		
	Класс math - класс для математики, имеет кучу функций, но надо учитывать, что в этих функциях проблема с точностью вычисления, т.к. используются floa и double.
	Math.abs(1);
    //Alternativa: Apache Jakarta
	Разработчики решили, что в java мало всего и сделалаи Apache Jakarta Commons, но со временем поняли, что одним проектом это не сделать, поэтому сделали еще
	Нам пригодится 2: Apache Jakarta Commons Math и Apache Jakarta Commons IO
		Надо быть аккуратно с лицензиями, если библиотека бесплатная, но не для комерческой работы, то если мы ее используем - она становится платной.
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	