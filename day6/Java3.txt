		Мы уже посмотрели разные дизайны, а какой же лучше.
	У нас есть набор решений. Все шаблоны - паттерны в нашем исходнике - это кубики нашего дизайна. Среди всех решений есть подмножество решений, которые
очень важные - это архитектура нашего приложения.
А теперь вопрос: является ли важным решением - дизайн алгоритмов? Ответ: да, является.
Приходят в нашу систему данные, и нам их надо сохранить в базу и в память, как лучше? Конечно сначало в память, потом в базу.
	Вся архитектура приложения определяется требованиями:
		1. Функциональные требования.
		2. Нефункциональные требования(атрибуты качества) обычно это произовдительность, отказоустойчивость, ориентированность на пользователя, целостность, безопасность.
		Посмотреть теорему CAP(Ряд характеристик не получается сделать одновременно).
		Постоянно приходится принимать решения, когда боремся с неопределенность - это называется Процесс/методология.
		Есть 2 пути: проще сделать - быстрее получить обратную связь, либо сделать систему наиболее гибко(KISS и BDUFF).
		
		Ивар Якобсон создал такую методологию RUF, есть инструмент SEMAT для создания UML моделей.
		
		KISS или BDUFF, что же лучше? Ничего - тут надо выбирать исходя из оценки. Где нужна гибкость - там вырываем, где не нужна - там оставляем как было.
		
		TDA: мы делаем умный объект, но к сожалению это редко делается. Проблема не решается на том уровне абстракции, на котором она возникла, она решается
на более высоком уровне абстракции.
		