		Оператор с точки зрения Java
	1. Оператор явного приведения типа.
	Работает довольно просто. Можно ли сделать из int ii = 1000; сделать переменную другого типа, что если она не влезет?
	byte bb = (byte)ii; 
	System.out.println(bb);
	Вывод: -24
	Старшие биты просто выкидываются. Откуда минус? Самый старший бит называется знаковым, старшие отрубаем, оказался битик единичным.
	Оператор casting очень опасный. Если приходится ссылочные типы явно кастить - имеет смысл переосмыслить свое приложение, чтобы не пришлось использовать
явный casting. Что же делать? Те операции, которые мы используем для типов, лучше перенести в сами объекты, чтобы не приходилось их кастить, чтобы объекты
сами знали как выполнять операции.
	
	2. Операторы арифметические.
	Arythmetic promotions - тип результата определяется типами операторов. Если у нас целые операторы, то результат будет целым. Если у нас плавающая точка, точка
результат будет так же с плавающей точкой.
	System.out.println(1 + 2 + "3" + 4 " 5);
	Что будет?
	a) 3345?
	b) 339?
	Правильный ответ: a. Операторы выполняются слева - направло. Чтобы не было проблем, лучше явным способом использовать скобки. У арифметических операторов
есть ассоциативность, есть приоритеты, есть приведение типов, т.е. если при сложении был тип int и double, он все приведет к double.

	Есть сложение, вычитание, деление, умножение, инкремент, декремент.
	Есть такое counter =+ 2;(counter = 2) - это оператор присваения, + идет как указание на то, что число положительное, 
	counter += 2;(counter = counter + 2) 
	Для возведения в степень используется библиотека Math, функция pow.
	Метод помечан как native и без тела - означает, что используется нативная операция, которая находится в системной библиотеке.
	JNI - Java Native Interfaces. Некоторая часть библиотеки написана не на Java, а на нативных кодах. Это сделано не на Java ради скорости работы.
	Math.pow(1,3) - возведение в степень.
	Native означает что написано под конкретную операционную систему и/или под конкретный процессор.
	
	3. Битовые операторы.
	и/или,xor,сдвиг,побитовое умножение.
	int i1 = 1, i2 = 2;
	Бинарные операторы:
	System.out.println(i1 | i2); - сложение (результат 3)
	System.out.println(i1 ^ i2); - xor 
	Унарный оператор: 
	System.out.println(~i1); - отрицание
	Сдвиги:
	System.out.println(i1 << 1); - аналогично умножению на 2 (без сохранения знакового сдвига)
	Есть еще знаковый сдвиг: System.out.println(i1 <<< 1); - старший бит по кругу будет сдвинут ( знаковый сдвиг)
	Битовые операция можно сделать только для целочисленных типов, для float не получится например.
	
	4. Операции по модулю.
	Взять остаток от деления по модулю
	System.out.println(10 % 3); выведет 1
	
	5. Логические операции. 
	В отличии от битовых операция, в логических учавствует тип строго boolean
	boolean b1 = false, b2 = true;
	System.out.println(b1 || b2); //and, or, not
	есть такие | &, а есть || && - есть отложенная форма или ленивая и жадная форма
	& - жадная форма умножения, вычисляет значение обоих операндов
	&& - ленивая форма, вычисляет только первый операнд, второй уже не смотрит.
	При использовании переменных разницы никакой нет, но при использовании функций, можно избежать вызова второй функции, например
	System.out.println(isB1() && isB2()); При каких-то значениях функция isB2 не будет вызываться, по аналогии finc() or die();
	Оператор не(!b2) - отрицание.
	
	6. Операторы сравнения.
	System.out.println(10 >= 3); 
	==, !=, >=, <=
	Можно ли сравнить 2 объекта?
	Cat cat1 = new Cat(1);
	Cat cat2 = new Cat(2);
	Если сделать так cat1 == cat2 - это выражение будет false, т.к. будет сравниваться ссылочные типы данных, объекты разные, ссылки не равны.
	Если использовать cat1 === cat2, он будет сравнивать объекты. правильно делать cat1.equals(cat2);
	
	7. Тернарный оператор.
	System.out.println(isB1()? "1" : "2");
	Проверяет, если значение isB1() true - вернется 1, если isB1() false - вернется 2.
	Неприятные моменты: можем возвращать разные типы объектов, мешает читабельности
	System.out.println(isB1()? 1 : isB2() ? : "1" : 2);
	
	Как бы сделать так, чтобы не сравнивать на null? Нормальных способов нет.
	Что если cat1 = null; и мы пытаемся вызвать метод cat1.getId()? Возникнет nullPointerException.
	Самый простой вариант if(cat1 != null) {}. Try - catch на проверку на null лучше не делать, это слишком дорогостоящая операция.Что если сделать 
препроцессор, который бы проверял, чтобы переменные не были null. С помощью аннотации @NotNull можно настраивать, чтобы компилятор проверял переменную 
во всем коде, чтобы она не была на null или наоборот указать, что данная переменная может быть null. Аннотация будет относиться к переменной, которая 
является полями объектов.
	Второй вариант.
	Optional<Cat> maybeCat = Optional.empty();
	maybeCat. - Суть в том, чтобы сделать обертки, которые контролировали бы переменную, чтобы она не была null.
	Второй вариант предпочтительней.
	
	
	
	
	
	
	
	