					Git.
				   /
				commit: изменение
				Между двумя коммитами можно увидеть сделанную разницу
				Каждый коммит - это описание, что изменилось.
Последовательность изменений - это ветвь(branch)
git позволяет просмотреть изменения за несколько версий

	Пример развертвления джита.
	
	В конце ветки можно совместить(merge)
	
	|					  |			  |
	0-------------------->0			  |
	|					  |			  0
	0					  |			  |
	|					  0---------->0
	0					  |
	|					  0
	0-------------------->|
	|
	0
	|
	0
	|
	0
	
	Главная метка, с которой все начинается, называется master.
	Автоматический merge можно делать когда нет пересечения изменений.
	Когда все это объединяется, это называется репозиторий.
	
	Если хотим с нуля просто создать репозиторий на диске, делаем git init.
	Git - репозиторий - это большая папка, в которой хранится текущее состояние.
	Чтобы отразить определенную точку в коммитах и поработать с ними, можно использовать команду checkout
	1. checkout commit 		- переключение между коммитами
	   checkout branch		- переключение между ветками
	Все операции происходят в рабочей директории.
	2. Делаем модификации.
	3. Сделанные изменения надо сохранить. Это 2 операции называются коммит. Staging - предварительный коммит(добавить в индекс), после делается уже 
	сам коммит - зафиксировать изменения.
	
	В распределенных репозиториях чаще всего используется распределенная модель.
	Используется центральный репозиторий, он клонируется на локальную рабочую станцию, операцией git clone.
	Но в какой-то момент, надо положить свои изменения в репозиторий, для есть команда git push
	Остальные также закидывают свои репозитории, чтобы их скачать себе можно сделать pull(но там также 2 команды)
	Если мы хотим запушить свои изменения, а проект уже кто-то отредактировал, git не даст сделать push, придется скачивать себе этот проект и как-то его
сливать. Чтобы этого избежать, придумали параллелить разработку, чтобы друг другу никто не мешал.Это все называется conficuration managment.
Идет обговор, как будет вестись ветвление, как это все будет merge-иться. Обычно все делится на ветки: master - заказчику; dev - ветка, куда все merge-ат
task-branch, где каждый работает в своей версии. Каждый день надо пушить task-branch в dev-ветку, этот паттерн называется Git-flow.

	Главный репозиторий называется origin
	Скачать себе репозиторий git clone <путь к репозиторию>, например: git clone https://github.com/kluik/test
	Переключиться на другую ветку git checkout <имя ветви>, например git checkout master
	В commit-message можно вносить полезную информацию
	Закоммитить в локальный репозиторий git commit -a -m "test commit", где test commit - это commit-messange
	git push отправит изменения на сервер
	
	В git есть такая вещь, как .gitignore, там можно описать все, что git не будет заливать в репозиторий, например нам не нужны бинарники в гите, нам
нам нужны только исходники.
	
	
	
	
	
	